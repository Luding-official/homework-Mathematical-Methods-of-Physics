% 定义时间变量t
t = linspace(-4 * pi, 4 * pi, 1000);

% 定义原函数f(t)
f = sawtooth(t);

% 计算傅里叶系数
N = [4, 20, 40]; % 谐波次数
A = zeros(length(N), length(t)); % 存储每个N对应的傅里叶系数
for x = 1:length(N)
    n = N(x);
    for y = 1:n
        a_n = (cos(2 * pi * y)-1)/(2 * pi^2 * y^2);
        b_n = -(cos(2 * pi * y)+1)/(2 * pi * y); % 计算an和bn
        A(x, :) = A(x, :) + a_n * cos(y * t) + b_n * sin(y * t); % 计算合成信号
    end
end

% 绘制原函数和合成函数
figure;
plot(t, f, 'k','DisplayName','Original Function','LineWidth', 1.5); % 输出原函数
hold on;
for x = 1:length(N) % 输出傅里叶级数
    plot(t, A(x, :), 'DisplayName', ['N=' num2str(N(x))]);
end
xlabel('Time (t)');
ylabel('Amplitude');
title('Original and Synthesized Functions');
legend show;
grid on;
hold off;

% 绘制幅度谱
for x = 1:length(N)
    y = 1:N(x);
    an = (cos(2 * pi * y) - 1) ./ (2 * pi^2 * y.^2);
    bn = -(cos(2 * pi * y) + 1) ./ (2 * pi * y); % 计算an和bn
    cn = sqrt(an.^2 + bn.^2); % 计算幅度
    figure;
    stem(y, cn, 'LineWidth', 1.5); % 修正的幅度谱绘制
    xlabel('Harmonic Order');
    ylabel('Magnitude');
    title(['Magnitude Spectrum for N=' num2str(N(x))]);
    grid on;
end
